/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findDistance(TreeNode root, int p, int q) {
        TreeNode lca = lowestCommonAncestor(root, p, q);
       int h1 = findDepth(lca, p, 0);
       int h2 = findDepth(lca, q, 0);
       return h1+h2;
    }

    public int findDepth(TreeNode root, int p, int index){
        if(root == null) return 0;
        if(root.val == p){
            return index;
        }
        int val = findDepth(root.left, p, index+1);
        if(val != 0){
            return val;
        } else {
            val = findDepth(root.right, p, index+1);
            return val;
        }
    }

    public TreeNode lowestCommonAncestor(TreeNode root, int p, int q){
       if(root == null) return null;
       if(root.val == p || root.val == q) return root;

       TreeNode left = lowestCommonAncestor(root.left, p, q);
       TreeNode right = lowestCommonAncestor(root.right, p, q);

       if(left != null && right  != null) return root;
       if(left != null) return left;
       else return right;
    }
}
