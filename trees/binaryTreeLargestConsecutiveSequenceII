/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxVal = 0;
    public int longestConsecutive(TreeNode root) {
        helper(root);
        return maxVal;
    }

    public int[] helper(TreeNode root){
        if(root == null){
            return new int[]{0, 0};
        }
        int inc=1, dec=1;

        if(root.left != null){
            int[] left = helper(root.left);
            if(root.val  == root.left.val+1){
                dec = Math.max(dec, left[1]+1);
            } else if(root.val == root.left.val -1){
                inc = Math.max(inc, left[0]+1);
            }
        }

        if(root.right != null){
            int[] right = helper(root.right);
            if(root.val == root.right.val+1){
                 dec = Math.max(dec, right[1]+1);
            } else if(root.val == root.right.val-1){
                inc = Math.max(inc, right[0]+1);
            }
        }
        maxVal = Math.max(maxVal, inc+dec-1);
        return new int[]{inc, dec};
    }
}
