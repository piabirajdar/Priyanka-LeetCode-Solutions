/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> res;
    Map<String, Integer> map;
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        res = new ArrayList<>();
        map = new HashMap<>();

        postOrder(root);
        return res;
    }

    public String postOrder(TreeNode node){
         if(node == null)
            return "N";
        String left = postOrder(node.left);
        String right = postOrder(node.right);
        String cur = node.val +" "+left+" "+right;
        System.out.println(cur);
        map.put(cur, map.getOrDefault(cur, 0)+1);
        if(map.get(cur) == 2)
            res.add(node);
        return cur;
    }
}
