class Solution {
     int[] res;
    int k;
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < numCourses; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int[] prereq: prerequisites) {
           map.get(prereq[0]).add(prereq[1]);
        }
        res = new int[numCourses];
        k = -1;
        boolean[] visited = new boolean[numCourses];
        boolean[] currPath = new boolean[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(i, map, visited, currPath)) return new int[] {};
        }
        return res;
    }
    
    public boolean dfs(int src, Map<Integer, List<Integer>> map, boolean[] visited, boolean[] currPath) {
        if (currPath[src]) return false; // Detects a cycle if the course was already visited as part of the current path
        if (visited[src]) return true;   // If the course has already been visited overall, it means it is already a part of the schedule
        currPath[src] = true;
        visited[src] = true;
        for (int neighbor: map.get(src)) {
            if (!dfs(neighbor, map, visited, currPath)) return false;
        }
        currPath[src] = false;  // Backtracking, so remove the course from the current path
        res[++k] = src;  // Once all dependencies are explored, add the course to the schedule
        return true;
    }
}
