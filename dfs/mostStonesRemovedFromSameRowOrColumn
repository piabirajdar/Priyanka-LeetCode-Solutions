class Solution {
    int cnt =0;
    int ans = 0;
    public int removeStones(int[][] stones) {
       Set<int[]> visited =new HashSet<>();
     Set<int[]> stonesSet = new HashSet<>();
        
        for(int[] grid: stones) {
            stonesSet.add(grid);
        }

        for(int[] arr : stones){
            if(!visited.contains(arr)){
                dfsUtil(arr, stonesSet, visited);
                if(cnt > 1){
                    ans+=cnt-1;
                }
            }
            cnt=0;
        }
        return ans;
    }
     public void dfsUtil(int[] arr, Set<int[]> stones,Set<int[]> visited) {
        cnt++;
        visited.add(arr);
    
        for(int[] grid : stones) {
            
            if(!visited.contains(grid)) {
                if(grid[0] == arr[0] || grid[1] == arr[1]) {
                    dfsUtil(grid, stones, visited);
                    
                }
            }
        }
     }
}
