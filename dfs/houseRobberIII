/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //works without hashmap as well it just to get optimization so as to not recalculate the sum for the same root again.
    Map<TreeNode, Integer> map = new HashMap<>();
    public int rob(TreeNode root) {
      if(root == null) return 0;
      if(map.containsKey(root)) {
          return map.get(root);
      }
      int sum = root.val;
      if(root.left != null) {
          sum += rob(root.left.left);
          sum += rob(root.left.right);
      }
      if(root.right != null) {
          sum += rob(root.right.left);
          sum += rob(root.right.right);
      }

      int nextSum = rob(root.left) + rob(root.right);
      int res = Math.max(sum, nextSum);
      map.put(root, res);
      return res;
    }
}
