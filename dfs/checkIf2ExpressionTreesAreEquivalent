/**
 * Definition for a binary tree node.
 * class Node {
 *     char val;
 *     Node left;
 *     Node right;
 *     Node() {this.val = ' ';}
 *     Node(char val) { this.val = val; }
 *     Node(char val, Node left, Node right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int[] map = new int[26];
    public boolean checkEquivalence(Node root1, Node root2) {
      
    dfs(root1,1);
    dfs(root2,-1);
    for(int val:map)
        if(val!=0)
            return false;
    return true;
    }

  private void dfs(Node root,int add){
    if(root==null)
        return;
    if(root.val<='z' && root.val>='a')
		map[root.val-'a']+=add;
      
    dfs(root.left,add);
    dfs(root.right,add);
}
}
