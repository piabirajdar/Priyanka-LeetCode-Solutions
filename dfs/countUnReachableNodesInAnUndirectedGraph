class Solution {
      List<List<Integer>> graph = new ArrayList<>();
       int size = 0;
    public long countPairs(int n, int[][] edges) {
        List<Integer> ls = new ArrayList<>();
      for(int i=0; i < n; i++){
          graph.add(new ArrayList<>());
      }
     
      for(int[] edge : edges){
          graph.get(edge[0]).add(edge[1]);
          graph.get(edge[1]).add(edge[0]);
      }
      boolean[] visited = new boolean[n];
      System.out.println(graph);
      for(int i=0; i < n; i++){
          if(!visited[i]){
              size = 1;
              dfs(i, visited);
              
              ls.add(size);
          }
      }
      System.out.println(ls);
      long ans=0;
      long sum=n;
      for(int i=0; i < ls.size(); i++){
          sum-=ls.get(i);
          ans+=(ls.get(i)*sum);
      }
    return ans;
    }

    public void dfs(int cur, boolean[] visited){
        visited[cur] = true;
        for(int node : graph.get(cur)){
            if(!visited[node]){
                size++;
                dfs(node, visited);
            }
        }
    }
}
