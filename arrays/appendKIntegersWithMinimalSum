class Solution {
    public long minimalKSum(int[] nums, int K) {
       Long k = (long) K;
        long sum = 0L;
        int count = K;
        //Below is the sum of n natural number.
        long ans = k * (k + 1)/2;
        HashSet<Integer> set = new HashSet<>();
        //Removing any elements that lie in the range [1,k];
        // AND we have to traverse count times because we have to add that many min element.
        for(int num : nums){
            if(!set.contains(num) && num <= K && num >= 1){
                sum += (long) num;
                count--;
            }
            set.add(num);
        }
    
        //Subtracting sum from the main answer that are overlapping in the range.
        ans -= sum;

        for(int i = K + 1;count < K;i++){
            if(!set.contains(i)){
                ans += i;
                count++;
            }
        }
        return ans;
    }
}
