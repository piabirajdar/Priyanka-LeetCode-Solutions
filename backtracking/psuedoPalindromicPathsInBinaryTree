/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, Integer> map;
    int paths=0;
    public int pseudoPalindromicPaths (TreeNode root) {
        map = new HashMap<>();
        helper(root);
        return paths;
    }

    public void helper(TreeNode root){
        if(root == null) return;
        map.put(root.val, map.getOrDefault(root.val, 0)+1);
        if(root.left == null && root.right == null){
            if(isPalindrome()){
                paths++;
            }
            
        }

        helper(root.left);
        helper(root.right);
        map.put(root.val, map.get(root.val)-1);
        if(map.get(root.val) ==0) map.remove(root.val);
    }

    public boolean isPalindrome(){
        int odd=0;
        int even=0;
        for(var entry: map.entrySet()){
            if(entry.getValue()%2 != 0){
                odd++;
            } else{
                even++;
            }
            
        }
       if(odd > 1) return false;
        else return true;
    }
}
