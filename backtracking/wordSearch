class Solution {
       public boolean exist(char[][] board, String word) {
        for(int i=0; i < board.length; i++){
            for(int j=0; j < board[i].length; j++){
                if(board[i][j] == word.charAt(0)){
                   if(dfs(board, word, i, j, 0)){
                       return true;
                   }
                }
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int i, int j, int pointer){
       if(pointer == word.length()) return true;
       if(i < 0 || i > board.length-1 || j < 0 || j > board[i].length-1 || board[i][j] != word.charAt(pointer)){
           return false;
       }


    char c  = board[i][j];
           board[i][j] = ' ';
       boolean left = dfs(board, word, i-1, j, pointer+1);
       boolean right = dfs(board, word, i+1, j, pointer+1);
       boolean top = dfs(board, word, i, j+1, pointer+1);
       boolean bottom = dfs(board, word, i, j-1, pointer+1);

       board[i][j] = c;
       return left || right || top || bottom;

    }
}
