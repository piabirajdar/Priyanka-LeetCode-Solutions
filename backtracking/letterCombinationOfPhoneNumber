class Solution {
      HashMap<Character, List<Character>> map = new HashMap<>();
        List<String> list = new ArrayList<>();
    public List<String> letterCombinations(String digits) {
        map.put('2', Arrays.asList('a', 'b', 'c'));
        map.put('3', Arrays.asList('d', 'e', 'f'));
        map.put('4', Arrays.asList('g', 'h', 'i'));
        map.put('5', Arrays.asList('j', 'k', 'l'));
        map.put('6', Arrays.asList('m', 'n', 'o'));
        map.put('7', Arrays.asList('p', 'q', 'r', 's'));
        map.put('8', Arrays.asList( 't', 'u', 'v'));
        map.put('9', Arrays.asList('w', 'x', 'y', 'z'));
          if(digits.length() == 0) return new ArrayList<>();
       helper(map, digits.toCharArray(), 0, new StringBuilder());
        return list; 
    }

    public void helper(Map<Character, List<Character>> map, char[] arr, int pos, StringBuilder sb){
        if(pos == arr.length){
            list.add(sb.toString());
            return;
        }

        List<Character> ls = map.get(arr[pos]);
        for(int i=0; i < ls.size(); i++){
            helper(map, arr, pos+1, sb.append(ls.get(i)));
            sb.deleteCharAt(sb.length()-1);
        }

    }
}
